{"ast":null,"code":"import { imgDb } from '../../../firebase';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport axios from 'axios';\nexport default {\n  name: \"EditProduct\",\n  props: ['open', 'productIdToUpdate'],\n  data() {\n    return {\n      percent: 0,\n      image: '',\n      data: {},\n      listCategory: []\n    };\n  },\n  watch: {\n    open(newVal) {\n      if (newVal) {\n        this.getProductById();\n        this.getcategory();\n      }\n    }\n  },\n  methods: {\n    async getProductById() {\n      try {\n        const res = await axios.get('product/' + this.productIdToUpdate);\n        this.data = res.data;\n      } catch (err) {\n        alert(\"Lỗi\");\n      }\n    },\n    async getcategory() {\n      try {\n        const res = await axios.get('category/getAll');\n        this.listCategory = res.data;\n      } catch (err) {\n        alert(err.response.data);\n      }\n    },\n    close() {\n      this.$emit('close');\n    },\n    remove() {\n      this.image = '';\n    },\n    async handleImageChange(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const imgRef = ref(imgDb, `/ecommerce/${file.name}`);\n        const uploadTask = uploadBytesResumable(imgRef, file);\n        uploadTask.on(\"state_changed\", snapshot => {\n          this.percent = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n        }, err => console.log(err), async () => {\n          const url = await getDownloadURL(uploadTask.snapshot.ref);\n          this.image = url;\n        });\n      } catch (err) {\n        console.error(\"Error uploading image:\", err);\n      }\n    }\n  }\n};","map":{"version":3,"names":["imgDb","ref","uploadBytesResumable","getDownloadURL","axios","name","props","data","percent","image","listCategory","watch","open","newVal","getProductById","getcategory","methods","res","get","productIdToUpdate","err","alert","response","close","$emit","remove","handleImageChange","event","file","target","files","imgRef","uploadTask","on","snapshot","Math","round","bytesTransferred","totalBytes","console","log","url","error"],"sources":["src/components/admin/Product/EditProduct.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"open\" class=\" w-[100vh] h-[70vh] bg-white z-50 fixed top-[20vh] right-[50vh] shadow-2xl\">\r\n        <div class=\"text-center relative\">\r\n            <h1 class=\"uppercase font-bold text-xl bg-[#271511] text-white p-2\">Edit Product</h1>\r\n            <font-awesome-icon icon=\"close\" @click=\"close\" class=\"absolute top-0 right-0 p-3 text-xl hover:cursor-pointer text-white  hover:bg-red-500\"/>\r\n        </div>\r\n        <div class=\"p-2\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"Name product\" v-model=\"data[0].name\" class=\"border-b w-full p-2 mb-2\">\r\n            <select name=\"category\" id=\"\" class=\"w-full border-b p-2 mb-2\">\r\n                <option selected>Choose category</option>\r\n                <option v-for=\"item in listCategory\" :key=\"item._id\" :value=\"item._id\"></option>\r\n            </select>   \r\n            <input type=\"number\" placeholder=\"Price\" v-model=\"data[0].price\" class=\"border-b p-2 mb-2\">\r\n            <textarea name=\"description\" id=\"\" placeholder=\"Description\" class=\"w-full p-2 mb-2 border-b\" />\r\n            <div class=\"flex\">\r\n                <label v-if=\"!image\" for=\"file\" class=\"\"><font-awesome-icon icon=\"camera\" class=\"p-6 border-2 text-2xl block hover:cursor-pointer\"/></label>\r\n                <div v-else class=\"relative\">\r\n                    <img :src=\"image\" alt=\"\" class=\"w-20 h-20 border-2 text-2xl block hover:cursor-pointer\">\r\n                    <font-awesome-icon icon=\"close\" @click=\"remove\" class=\"absolute top-0 right-0 p-1 hover:cursor-pointer border bg-slate-100 rounded-[50%]\"/>\r\n                </div>\r\n                    <input type=\"file\" hidden id=\"file\" name=\"image\" @change=\"handleImageChange\">\r\n            </div>\r\n            <button class=\"float-end p-2 bg-blue-400 shadow-md z-10 rounded-md\">Edit Product</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {imgDb} from '../../../firebase'\r\nimport { ref, uploadBytesResumable,getDownloadURL } from 'firebase/storage'\r\nimport axios from 'axios'\r\nexport default {\r\n    name:\"EditProduct\",\r\n    props:['open','productIdToUpdate'],\r\n    data(){\r\n        return{\r\n            percent:0,\r\n            image:'',\r\n            data:{},\r\n            listCategory:[]\r\n        }\r\n    },\r\n    watch: {\r\n        open(newVal) {\r\n            if (newVal) {\r\n                this.getProductById();\r\n                this.getcategory()\r\n            }\r\n        }\r\n    },\r\n    methods:{\r\n        async getProductById(){\r\n            try {\r\n                const res=await axios.get('product/'+this.productIdToUpdate)\r\n                this.data=res.data\r\n            } catch (err) {\r\n                alert(\"Lỗi\")\r\n            }\r\n        },\r\n        async getcategory(){\r\n            try {\r\n                const res=await axios.get('category/getAll')\r\n                this.listCategory=res.data\r\n            } catch (err) {\r\n                alert(err.response.data)\r\n            }\r\n        },\r\n        close(){\r\n            this.$emit('close');\r\n        },\r\n        remove(){\r\n            this.image=''\r\n        },\r\n        async handleImageChange(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n            try {\r\n                const imgRef = ref(imgDb, `/ecommerce/${file.name}`);\r\n                const uploadTask = uploadBytesResumable(imgRef, file);\r\n                uploadTask.on(\r\n                    \"state_changed\",\r\n                    (snapshot) => {\r\n                        this.percent = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n                    },\r\n                    (err) => console.log(err),\r\n                    async () => {\r\n                        const url = await getDownloadURL(uploadTask.snapshot.ref);\r\n                        this.image = url;\r\n                    }\r\n                );\r\n            } catch (err) {\r\n                console.error(\"Error uploading image:\", err);\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n</script>"],"mappings":"AA2BA,SAAAA,KAAA;AACA,SAAAC,GAAA,EAAAC,oBAAA,EAAAC,cAAA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAF,IAAA;MACAG,YAAA;IACA;EACA;EACAC,KAAA;IACAC,KAAAC,MAAA;MACA,IAAAA,MAAA;QACA,KAAAC,cAAA;QACA,KAAAC,WAAA;MACA;IACA;EACA;EACAC,OAAA;IACA,MAAAF,eAAA;MACA;QACA,MAAAG,GAAA,SAAAb,KAAA,CAAAc,GAAA,mBAAAC,iBAAA;QACA,KAAAZ,IAAA,GAAAU,GAAA,CAAAV,IAAA;MACA,SAAAa,GAAA;QACAC,KAAA;MACA;IACA;IACA,MAAAN,YAAA;MACA;QACA,MAAAE,GAAA,SAAAb,KAAA,CAAAc,GAAA;QACA,KAAAR,YAAA,GAAAO,GAAA,CAAAV,IAAA;MACA,SAAAa,GAAA;QACAC,KAAA,CAAAD,GAAA,CAAAE,QAAA,CAAAf,IAAA;MACA;IACA;IACAgB,MAAA;MACA,KAAAC,KAAA;IACA;IACAC,OAAA;MACA,KAAAhB,KAAA;IACA;IACA,MAAAiB,kBAAAC,KAAA;MACA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;MACA;QACA,MAAAG,MAAA,GAAA9B,GAAA,CAAAD,KAAA,gBAAA4B,IAAA,CAAAvB,IAAA;QACA,MAAA2B,UAAA,GAAA9B,oBAAA,CAAA6B,MAAA,EAAAH,IAAA;QACAI,UAAA,CAAAC,EAAA,CACA,iBACAC,QAAA;UACA,KAAA1B,OAAA,GAAA2B,IAAA,CAAAC,KAAA,CAAAF,QAAA,CAAAG,gBAAA,GAAAH,QAAA,CAAAI,UAAA;QACA,GACAlB,GAAA,IAAAmB,OAAA,CAAAC,GAAA,CAAApB,GAAA,GACA;UACA,MAAAqB,GAAA,SAAAtC,cAAA,CAAA6B,UAAA,CAAAE,QAAA,CAAAjC,GAAA;UACA,KAAAQ,KAAA,GAAAgC,GAAA;QACA,CACA;MACA,SAAArB,GAAA;QACAmB,OAAA,CAAAG,KAAA,2BAAAtB,GAAA;MACA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}