{"ast":null,"code":"import { imgDb } from '../../../firebase';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nexport default {\n  name: \"AddProduct\",\n  props: ['open'],\n  data() {\n    return {\n      percent: 0,\n      image: ''\n    };\n  },\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n    remove() {\n      this.image = '';\n    },\n    async handleImageChange(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const imgRef = ref(imgDb, `/ecommerce/${file.name}`);\n        const uploadTask = uploadBytesResumable(imgRef, file);\n        uploadTask.on(\"state_changed\", snapshot => {\n          this.percent = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n        }, err => console.log(err), async () => {\n          const url = await getDownloadURL(uploadTask.snapshot.ref);\n          this.image = url;\n        });\n      } catch (err) {\n        console.error(\"Error uploading image:\", err);\n      }\n    }\n  }\n};","map":{"version":3,"names":["imgDb","ref","uploadBytesResumable","getDownloadURL","name","props","data","percent","image","methods","close","$emit","remove","handleImageChange","event","file","target","files","imgRef","uploadTask","on","snapshot","Math","round","bytesTransferred","totalBytes","err","console","log","url","error"],"sources":["src/views/Admin/Product/AddProduct.vue"],"sourcesContent":["<template>\r\n    <div class=\" w-[100vh] h-[70vh] bg-white z-50 fixed top-[20vh] right-[50vh] shadow-2xl\">\r\n        <div class=\"text-center relative\">\r\n            <h1 class=\"uppercase font-bold text-xl bg-[#271511] text-white p-2\">Add Product</h1>\r\n            <font-awesome-icon icon=\"close\" @click=\"close\" class=\"absolute top-0 right-0 p-3 text-xl hover:cursor-pointer text-white  hover:bg-red-500\"/>\r\n        </div>\r\n        <div class=\"p-2\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"Name product\" class=\"border-b w-full p-2 mb-2\">\r\n            <select name=\"category\" id=\"\" class=\"w-full border-b p-2 mb-2\">\r\n                <option selected>Choose category</option>\r\n                <option value=\"\">bep</option>\r\n            </select>   \r\n            <input type=\"number\" placeholder=\"Price\" class=\"border-b p-2 mb-2\">\r\n            <textarea name=\"description\" id=\"\" placeholder=\"Description\" class=\"w-full p-2 mb-2 border-b\" />\r\n            <div class=\"flex\">\r\n                <label v-if=\"!image\" for=\"file\" class=\"\"><font-awesome-icon icon=\"camera\" class=\"p-6 border-2 text-2xl block hover:cursor-pointer\"/></label>\r\n                <div v-else class=\"relative\">\r\n                    <img :src=\"image\" alt=\"\" class=\"w-20 h-20 border-2 text-2xl block hover:cursor-pointer\">\r\n                    <font-awesome-icon icon=\"close\" @click=\"remove\" class=\"absolute top-0 right-0 p-1 hover:cursor-pointer border bg-slate-100 rounded-[50%]\"/>\r\n                </div>\r\n                    <input type=\"file\" hidden id=\"file\" name=\"image\" @change=\"handleImageChange\">\r\n            </div>\r\n            <button></button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {imgDb} from '../../../firebase'\r\nimport { ref, uploadBytesResumable,getDownloadURL } from 'firebase/storage'\r\nexport default {\r\n    name:\"AddProduct\",\r\n    props:['open'],\r\n    data(){\r\n        return{\r\n            percent:0,\r\n            image:''\r\n        }\r\n    },\r\n    methods:{\r\n        close(){\r\n            this.$emit('close');\r\n        },\r\n        remove(){\r\n            this.image=''\r\n        },\r\n        async handleImageChange(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n            try {\r\n                const imgRef = ref(imgDb, `/ecommerce/${file.name}`);\r\n                const uploadTask = uploadBytesResumable(imgRef, file);\r\n                uploadTask.on(\r\n                    \"state_changed\",\r\n                    (snapshot) => {\r\n                        this.percent = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n                    },\r\n                    (err) => console.log(err),\r\n                    async () => {\r\n                        const url = await getDownloadURL(uploadTask.snapshot.ref);\r\n                        this.image = url;\r\n                    }\r\n                );\r\n            } catch (err) {\r\n                console.error(\"Error uploading image:\", err);\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"AA2BA,SAAAA,KAAA;AACA,SAAAC,GAAA,EAAAC,oBAAA,EAAAC,cAAA;AACA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA;MACA,KAAAC,KAAA;IACA;IACAC,OAAA;MACA,KAAAJ,KAAA;IACA;IACA,MAAAK,kBAAAC,KAAA;MACA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;MACA;QACA,MAAAG,MAAA,GAAAjB,GAAA,CAAAD,KAAA,gBAAAe,IAAA,CAAAX,IAAA;QACA,MAAAe,UAAA,GAAAjB,oBAAA,CAAAgB,MAAA,EAAAH,IAAA;QACAI,UAAA,CAAAC,EAAA,CACA,iBACAC,QAAA;UACA,KAAAd,OAAA,GAAAe,IAAA,CAAAC,KAAA,CAAAF,QAAA,CAAAG,gBAAA,GAAAH,QAAA,CAAAI,UAAA;QACA,GACAC,GAAA,IAAAC,OAAA,CAAAC,GAAA,CAAAF,GAAA,GACA;UACA,MAAAG,GAAA,SAAA1B,cAAA,CAAAgB,UAAA,CAAAE,QAAA,CAAApB,GAAA;UACA,KAAAO,KAAA,GAAAqB,GAAA;QACA,CACA;MACA,SAAAH,GAAA;QACAC,OAAA,CAAAG,KAAA,2BAAAJ,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}