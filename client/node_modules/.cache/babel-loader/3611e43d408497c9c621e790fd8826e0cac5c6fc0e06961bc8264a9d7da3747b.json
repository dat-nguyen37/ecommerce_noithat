{"ast":null,"code":"/**\r\n *@description 观察者模式 全局监听富文本编辑器\r\n */\nexport const QuillWatch = {\n  watcher: {},\n  // 登记编辑器信息\n  active: null,\n  // 当前触发的编辑器\n  on: function (imageExtendId, ImageExtend) {\n    // 登记注册使用了ImageEXtend的编辑器\n    if (!this.watcher[imageExtendId]) {\n      this.watcher[imageExtendId] = ImageExtend;\n    }\n  },\n  emit: function (activeId, type = 1) {\n    // 事件发射触发\n    this.active = this.watcher[activeId];\n    if (type === 1) {\n      imgHandler();\n    }\n  }\n};\n\n/**\r\n * @description 图片功能拓展： 增加上传 拖动 复制\r\n */\nexport class ImageExtend {\n  /**\r\n   * @param quill {Quill}富文本实例\r\n   * @param config {Object} options\r\n   * config  keys: action, headers, editForm start end error  size response\r\n   */\n  constructor(quill, config = {}) {\n    this.id = Math.random();\n    this.quill = quill;\n    this.quill.id = this.id;\n    this.config = config;\n    this.file = ''; // 要上传的图片\n    this.imgURL = ''; // 图片地址\n    quill.root.addEventListener('paste', this.pasteHandle.bind(this), false);\n    quill.root.addEventListener('drop', this.dropHandle.bind(this), false);\n    quill.root.addEventListener('dropover', function (e) {\n      e.preventDefault();\n    }, false);\n    this.cursorIndex = 0;\n    QuillWatch.on(this.id, this);\n  }\n\n  /**\r\n   * @description 粘贴\r\n   * @param e\r\n   */\n  pasteHandle(e) {\n    // e.preventDefault()\n    QuillWatch.emit(this.quill.id, 0);\n    let clipboardData = e.clipboardData;\n    let i = 0;\n    let items, item, types;\n    if (clipboardData) {\n      items = clipboardData.items;\n      if (!items) {\n        return;\n      }\n      item = items[0];\n      types = clipboardData.types || [];\n      for (; i < types.length; i++) {\n        if (types[i] === 'Files') {\n          item = items[i];\n          break;\n        }\n      }\n      if (item && item.kind === 'file' && item.type.match(/^image\\//i)) {\n        this.file = item.getAsFile();\n        let self = this;\n        // 如果图片限制大小\n        if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n          if (self.config.sizeError) {\n            self.config.sizeError();\n          }\n          return;\n        }\n        if (this.config.action) {\n          // this.uploadImg()\n        } else {\n          // this.toBase64()\n        }\n      }\n    }\n  }\n\n  /**\r\n   * 拖拽\r\n   * @param e\r\n   */\n  dropHandle(e) {\n    QuillWatch.emit(this.quill.id, 0);\n    const self = this;\n    e.preventDefault();\n    // 如果图片限制大小\n    if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n      if (self.config.sizeError) {\n        self.config.sizeError();\n      }\n      return;\n    }\n    self.file = e.dataTransfer.files[0]; // 获取到第一个上传的文件对象\n    if (this.config.action) {\n      self.uploadImg();\n    } else {\n      self.toBase64();\n    }\n  }\n\n  /**\r\n   * @description 将图片转为base4\r\n   */\n  toBase64() {\n    const self = this;\n    const reader = new FileReader();\n    reader.onload = e => {\n      // 返回base64\n      self.imgURL = e.target.result;\n      self.insertImg();\n    };\n    reader.readAsDataURL(self.file);\n  }\n\n  /**\r\n   * @description 上传图片到服务器\r\n   */\n  uploadImg() {\n    const self = this;\n    let quillLoading = self.quillLoading;\n    let config = self.config;\n    // 构造表单\n    let formData = new FormData();\n    formData.append(config.name, self.file);\n    // 自定义修改表单\n    if (config.editForm) {\n      config.editForm(formData);\n    }\n    // 创建ajax请求\n    let xhr = new XMLHttpRequest();\n    xhr.open('post', config.action, true);\n    // 如果有设置请求头\n    if (config.headers) {\n      config.headers(xhr);\n    }\n    if (config.change) {\n      config.change(xhr, formData);\n    }\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          //success\n          let res = JSON.parse(xhr.responseText);\n          self.imgURL = config.response(res);\n          QuillWatch.active.uploadSuccess();\n          self.insertImg();\n          if (self.config.success) {\n            self.config.success();\n          }\n        } else {\n          //error\n          if (self.config.error) {\n            self.config.error();\n          }\n          QuillWatch.active.uploadError();\n        }\n      }\n    };\n    // 开始上传数据\n    xhr.upload.onloadstart = function (e) {\n      QuillWatch.active.uploading();\n      // let length = (self.quill.getSelection() || {}).index || self.quill.getLength()\n      // self.quill.insertText(length, '[uploading...]', { 'color': 'red'}, true)\n      if (config.start) {\n        config.start();\n      }\n    };\n    // 上传过程\n    xhr.upload.onprogress = function (e) {\n      let complete = (e.loaded / e.total * 100 | 0) + '%';\n      QuillWatch.active.progress(complete);\n    };\n    // 当发生网络异常的时候会触发，如果上传数据的过程还未结束\n    xhr.upload.onerror = function (e) {\n      QuillWatch.active.uploadError();\n      if (config.error) {\n        config.error();\n      }\n    };\n    // 上传数据完成（成功或者失败）时会触发\n    xhr.upload.onloadend = function (e) {\n      if (config.end) {\n        config.end();\n      }\n    };\n    xhr.send(formData);\n  }\n\n  /**\r\n   * @description 往富文本编辑器插入图片\r\n   */\n  insertImg() {\n    const self = QuillWatch.active;\n    self.quill.insertEmbed(QuillWatch.active.cursorIndex, 'image', self.imgURL);\n    self.quill.update();\n    self.quill.setSelection(self.cursorIndex + 1);\n  }\n\n  /**\r\n   * @description 显示上传的进度\r\n   */\n  progress(pro) {\n    pro = '[' + 'uploading' + pro + ']';\n    QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, pro);\n  }\n\n  /**\r\n   * 开始上传\r\n   */\n  uploading() {\n    let length = (QuillWatch.active.quill.getSelection() || {}).index || QuillWatch.active.quill.getLength();\n    QuillWatch.active.cursorIndex = length;\n    QuillWatch.active.quill.insertText(QuillWatch.active.cursorIndex, '[uploading...]', {\n      'color': 'red'\n    }, true);\n  }\n\n  /**\r\n   * 上传失败\r\n   */\n  uploadError() {\n    QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '[upload error]');\n  }\n  uploadSuccess() {\n    QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '');\n  }\n}\n\n/**\r\n * @description 点击图片上传\r\n */\nexport function imgHandler() {\n  let fileInput = document.querySelector('.quill-image-input');\n  if (fileInput === null) {\n    fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.classList.add('quill-image-input');\n    fileInput.style.display = 'none';\n    // 监听选择文件\n    fileInput.addEventListener('change', function () {\n      let self = QuillWatch.active;\n      self.file = fileInput.files[0];\n      fileInput.value = '';\n      // 如果图片限制大小\n      if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n        if (self.config.sizeError) {\n          self.config.sizeError();\n        }\n        return;\n      }\n      if (self.config.action) {\n        self.uploadImg();\n      } else {\n        self.toBase64();\n      }\n    });\n    document.body.appendChild(fileInput);\n  }\n  fileInput.click();\n}\n\n/**\r\n *@description 全部工具栏\r\n */\nexport const container = [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n  'header': 1\n}, {\n  'header': 2\n}], [{\n  'list': 'ordered'\n}, {\n  'list': 'bullet'\n}], [{\n  'script': 'sub'\n}, {\n  'script': 'super'\n}], [{\n  'indent': '-1'\n}, {\n  'indent': '+1'\n}], [{\n  'direction': 'rtl'\n}], [{\n  'size': ['small', false, 'large', 'huge']\n}], [{\n  'header': [1, 2, 3, 4, 5, 6, false]\n}], [{\n  'color': []\n}, {\n  'background': []\n}], [{\n  'font': []\n}], [{\n  'align': []\n}], ['clean'], ['link', 'image', 'video']];","map":{"version":3,"names":["QuillWatch","watcher","active","on","imageExtendId","ImageExtend","emit","activeId","type","imgHandler","constructor","quill","config","id","Math","random","file","imgURL","root","addEventListener","pasteHandle","bind","dropHandle","e","preventDefault","cursorIndex","clipboardData","i","items","item","types","length","kind","match","getAsFile","self","size","sizeError","action","dataTransfer","files","uploadImg","toBase64","reader","FileReader","onload","target","result","insertImg","readAsDataURL","quillLoading","formData","FormData","append","name","editForm","xhr","XMLHttpRequest","open","headers","change","onreadystatechange","readyState","status","res","JSON","parse","responseText","response","uploadSuccess","success","error","uploadError","upload","onloadstart","uploading","start","onprogress","complete","loaded","total","progress","onerror","onloadend","end","send","insertEmbed","update","setSelection","pro","innerHTML","replace","getSelection","index","getLength","insertText","fileInput","document","querySelector","createElement","setAttribute","classList","add","style","display","value","body","appendChild","click","container"],"sources":["D:/Workspace/vuejs/Ecommerce/frontend/node_modules/quill-image-extend-module/index.js"],"sourcesContent":["/**\r\n *@description 观察者模式 全局监听富文本编辑器\r\n */\r\nexport const QuillWatch = {\r\n    watcher: {},  // 登记编辑器信息\r\n    active: null,  // 当前触发的编辑器\r\n    on: function (imageExtendId, ImageExtend) {  // 登记注册使用了ImageEXtend的编辑器\r\n        if (!this.watcher[imageExtendId]) {\r\n            this.watcher[imageExtendId] = ImageExtend\r\n        }\r\n    },\r\n    emit: function (activeId, type = 1) {  // 事件发射触发\r\n        this.active = this.watcher[activeId]\r\n        if (type === 1) {\r\n            imgHandler()\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @description 图片功能拓展： 增加上传 拖动 复制\r\n */\r\nexport class ImageExtend {\r\n    /**\r\n     * @param quill {Quill}富文本实例\r\n     * @param config {Object} options\r\n     * config  keys: action, headers, editForm start end error  size response\r\n     */\r\n    constructor(quill, config = {}) {\r\n        this.id = Math.random()\r\n        this.quill = quill\r\n        this.quill.id = this.id\r\n        this.config = config\r\n        this.file = ''  // 要上传的图片\r\n        this.imgURL = ''  // 图片地址\r\n        quill.root.addEventListener('paste', this.pasteHandle.bind(this), false)\r\n        quill.root.addEventListener('drop', this.dropHandle.bind(this), false)\r\n        quill.root.addEventListener('dropover', function (e) {\r\n            e.preventDefault()\r\n        }, false)\r\n        this.cursorIndex = 0\r\n        QuillWatch.on(this.id, this)\r\n    }\r\n\r\n    /**\r\n     * @description 粘贴\r\n     * @param e\r\n     */\r\n    pasteHandle(e) {\r\n        // e.preventDefault()\r\n        QuillWatch.emit(this.quill.id, 0)\r\n        let clipboardData = e.clipboardData\r\n        let i = 0\r\n        let items, item, types\r\n\r\n        if (clipboardData) {\r\n            items = clipboardData.items;\r\n\r\n            if (!items) {\r\n                return;\r\n            }\r\n            item = items[0];\r\n            types = clipboardData.types || [];\r\n\r\n            for (; i < types.length; i++) {\r\n                if (types[i] === 'Files') {\r\n                    item = items[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (item && item.kind === 'file' && item.type.match(/^image\\//i)) {\r\n                this.file = item.getAsFile()\r\n                let self = this\r\n                // 如果图片限制大小\r\n                if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n                    if (self.config.sizeError) {\r\n                        self.config.sizeError()\r\n                    }\r\n                    return\r\n                }\r\n                if (this.config.action) {\r\n                    // this.uploadImg()\r\n                } else {\r\n                    // this.toBase64()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 拖拽\r\n     * @param e\r\n     */\r\n    dropHandle(e) {\r\n        QuillWatch.emit(this.quill.id, 0)\r\n        const self = this\r\n        e.preventDefault()\r\n        // 如果图片限制大小\r\n        if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n            if (self.config.sizeError) {\r\n                self.config.sizeError()\r\n            }\r\n            return\r\n        }\r\n        self.file = e.dataTransfer.files[0]; // 获取到第一个上传的文件对象\r\n        if (this.config.action) {\r\n            self.uploadImg()\r\n        } else {\r\n            self.toBase64()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 将图片转为base4\r\n     */\r\n    toBase64() {\r\n        const self = this\r\n        const reader = new FileReader()\r\n        reader.onload = (e) => {\r\n            // 返回base64\r\n            self.imgURL = e.target.result\r\n            self.insertImg()\r\n        }\r\n        reader.readAsDataURL(self.file)\r\n    }\r\n\r\n    /**\r\n     * @description 上传图片到服务器\r\n     */\r\n    uploadImg() {\r\n        const self = this\r\n        let quillLoading = self.quillLoading\r\n        let config = self.config\r\n        // 构造表单\r\n        let formData = new FormData()\r\n        formData.append(config.name, self.file)\r\n        // 自定义修改表单\r\n        if (config.editForm) {\r\n            config.editForm(formData)\r\n        }\r\n        // 创建ajax请求\r\n        let xhr = new XMLHttpRequest()\r\n        xhr.open('post', config.action, true)\r\n        // 如果有设置请求头\r\n        if (config.headers) {\r\n            config.headers(xhr)\r\n        }\r\n        if (config.change) {\r\n            config.change(xhr, formData)\r\n        }\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    //success\r\n                    let res = JSON.parse(xhr.responseText)\r\n                    self.imgURL = config.response(res)\r\n                    QuillWatch.active.uploadSuccess()\r\n                    self.insertImg()\r\n                    if (self.config.success) {\r\n                        self.config.success()\r\n                    }\r\n                } else {\r\n                    //error\r\n                    if (self.config.error) {\r\n                        self.config.error()\r\n                    }\r\n                    QuillWatch.active.uploadError()\r\n                }\r\n            }\r\n        }\r\n        // 开始上传数据\r\n        xhr.upload.onloadstart = function (e) {\r\n            QuillWatch.active.uploading()\r\n            // let length = (self.quill.getSelection() || {}).index || self.quill.getLength()\r\n            // self.quill.insertText(length, '[uploading...]', { 'color': 'red'}, true)\r\n            if (config.start) {\r\n                config.start()\r\n            }\r\n        }\r\n        // 上传过程\r\n        xhr.upload.onprogress = function (e) {\r\n            let complete = (e.loaded / e.total * 100 | 0) + '%'\r\n            QuillWatch.active.progress(complete)\r\n        }\r\n        // 当发生网络异常的时候会触发，如果上传数据的过程还未结束\r\n        xhr.upload.onerror = function (e) {\r\n            QuillWatch.active.uploadError()\r\n            if (config.error) {\r\n                config.error()\r\n            }\r\n        }\r\n        // 上传数据完成（成功或者失败）时会触发\r\n        xhr.upload.onloadend = function (e) {\r\n            if (config.end) {\r\n                config.end()\r\n            }\r\n        }\r\n        xhr.send(formData)\r\n    }\r\n\r\n    /**\r\n     * @description 往富文本编辑器插入图片\r\n     */\r\n    insertImg() {\r\n        const self = QuillWatch.active\r\n        self.quill.insertEmbed(QuillWatch.active.cursorIndex, 'image', self.imgURL)\r\n        self.quill.update()\r\n        self.quill.setSelection(self.cursorIndex+1);\r\n    }\r\n\r\n    /**\r\n     * @description 显示上传的进度\r\n     */\r\n    progress(pro) {\r\n        pro = '[' + 'uploading' + pro + ']'\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, pro)\r\n    }\r\n\r\n    /**\r\n     * 开始上传\r\n     */\r\n    uploading() {\r\n        let length = (QuillWatch.active.quill.getSelection() || {}).index || QuillWatch.active.quill.getLength()\r\n        QuillWatch.active.cursorIndex = length\r\n        QuillWatch.active.quill.insertText(QuillWatch.active.cursorIndex, '[uploading...]', {'color': 'red'}, true)\r\n    }\r\n\r\n    /**\r\n     * 上传失败\r\n     */\r\n    uploadError() {\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '[upload error]')\r\n    }\r\n\r\n    uploadSuccess() {\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '')\r\n    }\r\n}\r\n\r\n/**\r\n * @description 点击图片上传\r\n */\r\nexport function imgHandler() {\r\n    let fileInput = document.querySelector('.quill-image-input');\r\n    if (fileInput === null) {\r\n        fileInput = document.createElement('input');\r\n        fileInput.setAttribute('type', 'file');\r\n        fileInput.classList.add('quill-image-input');\r\n        fileInput.style.display = 'none'\r\n        // 监听选择文件\r\n        fileInput.addEventListener('change', function () {\r\n            let self = QuillWatch.active\r\n            self.file = fileInput.files[0]\r\n            fileInput.value = ''\r\n            // 如果图片限制大小\r\n            if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n                if (self.config.sizeError) {\r\n                    self.config.sizeError()\r\n                }\r\n                return\r\n            }\r\n            if (self.config.action) {\r\n                self.uploadImg()\r\n            } else {\r\n                self.toBase64()\r\n            }\r\n        })\r\n        document.body.appendChild(fileInput);\r\n    }\r\n    fileInput.click();\r\n}\r\n\r\n/**\r\n *@description 全部工具栏\r\n */\r\nexport const container = [\r\n    ['bold', 'italic', 'underline', 'strike'],\r\n    ['blockquote', 'code-block'],\r\n    [{'header': 1}, {'header': 2}],\r\n    [{'list': 'ordered'}, {'list': 'bullet'}],\r\n    [{'script': 'sub'}, {'script': 'super'}],\r\n    [{'indent': '-1'}, {'indent': '+1'}],\r\n    [{'direction': 'rtl'}],\r\n    [{'size': ['small', false, 'large', 'huge']}],\r\n    [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n    [{'color': []}, {'background': []}],\r\n    [{'font': []}],\r\n    [{'align': []}],\r\n    ['clean'],\r\n    ['link', 'image', 'video']\r\n]\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}