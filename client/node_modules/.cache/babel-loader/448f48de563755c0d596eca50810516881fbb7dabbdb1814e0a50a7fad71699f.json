{"ast":null,"code":"/*! @preserve\n * numeral.js\n * locales : 2.0.6\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['numeral'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./numeral'));\n  } else {\n    factory(global.numeral);\n  }\n})(this, function (numeral) {\n  (function () {\n    numeral.register('locale', 'bg', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/bg.html\n        thousand: 'хил',\n        million: 'млн',\n        billion: 'млрд',\n        trillion: 'трлн'\n      },\n      ordinal: function (number) {\n        // google translate suggests:\n        // 1st=1-ви; 2nd=2-ри; 7th=7-ми;\n        // 8th=8-ми and many others end with -ти\n        // for example 3rd=3-ти\n        // However since I've seen suggestions that in\n        // Bulgarian the ordinal can be taken in\n        // different forms (masculine, feminine, neuter)\n        // I've opted to wimp out on commiting that to code\n        return '';\n      },\n      currency: {\n        symbol: 'лв'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'chs', {\n      delimiters: {\n        thousands: ',',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: '千',\n        million: '百万',\n        billion: '十亿',\n        trillion: '兆'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '¥'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'cs', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'tis.',\n        million: 'mil.',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function () {\n        return '.';\n      },\n      currency: {\n        symbol: 'Kč'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'da-dk', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'mio',\n        billion: 'mia',\n        trillion: 'b'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: 'DKK'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'de-ch', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: 'CHF'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'de', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'en-au', {\n      delimiters: {\n        thousands: ',',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        var b = number % 10;\n        return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      },\n      currency: {\n        symbol: '$'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'en-gb', {\n      delimiters: {\n        thousands: ',',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        var b = number % 10;\n        return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      },\n      currency: {\n        symbol: '£'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'en-za', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        var b = number % 10;\n        return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      },\n      currency: {\n        symbol: 'R'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'es-es', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'mm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        var b = number % 10;\n        return b === 1 || b === 3 ? 'er' : b === 2 ? 'do' : b === 7 || b === 0 ? 'mo' : b === 8 ? 'vo' : b === 9 ? 'no' : 'to';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'es', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'mm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        var b = number % 10;\n        return b === 1 || b === 3 ? 'er' : b === 2 ? 'do' : b === 7 || b === 0 ? 'mo' : b === 8 ? 'vo' : b === 9 ? 'no' : 'to';\n      },\n      currency: {\n        symbol: '$'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'et', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: ' tuh',\n        million: ' mln',\n        billion: ' mld',\n        trillion: ' trl'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'fi', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'M',\n        billion: 'G',\n        trillion: 'T'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'fr-ca', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'M',\n        billion: 'G',\n        trillion: 'T'\n      },\n      ordinal: function (number) {\n        return number === 1 ? 'er' : 'e';\n      },\n      currency: {\n        symbol: '$'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'fr-ch', {\n      delimiters: {\n        thousands: '\\'',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return number === 1 ? 'er' : 'e';\n      },\n      currency: {\n        symbol: 'CHF'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'fr', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return number === 1 ? 'er' : 'e';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'hu', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'E',\n        // ezer\n        million: 'M',\n        // millió\n        billion: 'Mrd',\n        // milliárd\n        trillion: 'T' // trillió\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: ' Ft'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'it', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'mila',\n        million: 'mil',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return 'º';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'ja', {\n      delimiters: {\n        thousands: ',',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: '千',\n        million: '百万',\n        billion: '十億',\n        trillion: '兆'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '¥'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'lv', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: ' tūkst.',\n        million: ' milj.',\n        billion: ' mljrd.',\n        trillion: ' trilj.'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'nl-be', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: ' mln',\n        billion: ' mld',\n        trillion: ' bln'\n      },\n      ordinal: function (number) {\n        var remainder = number % 100;\n        return number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20 ? 'ste' : 'de';\n      },\n      currency: {\n        symbol: '€ '\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'nl-nl', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'mln',\n        billion: 'mrd',\n        trillion: 'bln'\n      },\n      ordinal: function (number) {\n        var remainder = number % 100;\n        return number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20 ? 'ste' : 'de';\n      },\n      currency: {\n        symbol: '€ '\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'no', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: 'kr'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'pl', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'tys.',\n        million: 'mln',\n        billion: 'mld',\n        trillion: 'bln'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: 'PLN'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'pt-br', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'mil',\n        million: 'milhões',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return 'º';\n      },\n      currency: {\n        symbol: 'R$'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'pt-pt', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function (number) {\n        return 'º';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'ru-ua', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'тыс.',\n        million: 'млн',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function () {\n        // not ideal, but since in Russian it can taken on\n        // different forms (masculine, feminine, neuter)\n        // this is all we can do\n        return '.';\n      },\n      currency: {\n        symbol: '\\u20B4'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'ru', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'тыс.',\n        million: 'млн.',\n        billion: 'млрд.',\n        trillion: 'трлн.'\n      },\n      ordinal: function () {\n        // not ideal, but since in Russian it can taken on\n        // different forms (masculine, feminine, neuter)\n        // this is all we can do\n        return '.';\n      },\n      currency: {\n        symbol: 'руб.'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'sk', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'tis.',\n        million: 'mil.',\n        billion: 'b',\n        trillion: 't'\n      },\n      ordinal: function () {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'sl', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'k',\n        million: 'mio',\n        billion: 'mrd',\n        trillion: 'trilijon'\n      },\n      ordinal: function () {\n        return '.';\n      },\n      currency: {\n        symbol: '€'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'th', {\n      delimiters: {\n        thousands: ',',\n        decimal: '.'\n      },\n      abbreviations: {\n        thousand: 'พัน',\n        million: 'ล้าน',\n        billion: 'พันล้าน',\n        trillion: 'ล้านล้าน'\n      },\n      ordinal: function (number) {\n        return '.';\n      },\n      currency: {\n        symbol: '฿'\n      }\n    });\n  })();\n  (function () {\n    var suffixes = {\n      1: '\\'inci',\n      5: '\\'inci',\n      8: '\\'inci',\n      70: '\\'inci',\n      80: '\\'inci',\n      2: '\\'nci',\n      7: '\\'nci',\n      20: '\\'nci',\n      50: '\\'nci',\n      3: '\\'üncü',\n      4: '\\'üncü',\n      100: '\\'üncü',\n      6: '\\'ncı',\n      9: '\\'uncu',\n      10: '\\'uncu',\n      30: '\\'uncu',\n      60: '\\'ıncı',\n      90: '\\'ıncı'\n    };\n    numeral.register('locale', 'tr', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'bin',\n        million: 'milyon',\n        billion: 'milyar',\n        trillion: 'trilyon'\n      },\n      ordinal: function (number) {\n        if (number === 0) {\n          // special case for zero\n          return '\\'ıncı';\n        }\n        var a = number % 10,\n          b = number % 100 - a,\n          c = number >= 100 ? 100 : null;\n        return suffixes[a] || suffixes[b] || suffixes[c];\n      },\n      currency: {\n        symbol: '\\u20BA'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'uk-ua', {\n      delimiters: {\n        thousands: ' ',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: 'тис.',\n        million: 'млн',\n        billion: 'млрд',\n        trillion: 'блн'\n      },\n      ordinal: function () {\n        // not ideal, but since in Ukrainian it can taken on\n        // different forms (masculine, feminine, neuter)\n        // this is all we can do\n        return '';\n      },\n      currency: {\n        symbol: '\\u20B4'\n      }\n    });\n  })();\n  (function () {\n    numeral.register('locale', 'vi', {\n      delimiters: {\n        thousands: '.',\n        decimal: ','\n      },\n      abbreviations: {\n        thousand: ' nghìn',\n        million: ' triệu',\n        billion: ' tỷ',\n        trillion: ' nghìn tỷ'\n      },\n      ordinal: function () {\n        return '.';\n      },\n      currency: {\n        symbol: '₫'\n      }\n    });\n  })();\n});","map":{"version":3,"names":["global","factory","define","amd","module","exports","require","numeral","register","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","ordinal","number","currency","symbol","b","remainder","suffixes","a","c"],"sources":["D:/Workspace/vuejs/Ecommerce/frontend/node_modules/numeral/locales.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * locales : 2.0.6\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['numeral'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        factory(require('./numeral'));\n    } else {\n        factory(global.numeral);\n    }\n}(this, function (numeral) {\n    \n(function() {\n        numeral.register('locale', 'bg', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/bg.html\n            thousand: 'хил',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'трлн'\n        },\n        ordinal: function (number) {\n            // google translate suggests:\n            // 1st=1-ви; 2nd=2-ри; 7th=7-ми;\n            // 8th=8-ми and many others end with -ти\n            // for example 3rd=3-ти\n            // However since I've seen suggestions that in\n            // Bulgarian the ordinal can be taken in\n            // different forms (masculine, feminine, neuter)\n            // I've opted to wimp out on commiting that to code\n            return '';\n        },\n        currency: {\n            symbol: 'лв'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'chs', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十亿',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'cs', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: 'Kč'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'da-dk', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mia',\n            trillion: 'b'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'DKK'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de-ch', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-au', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-gb', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '£'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-za', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                    (b === 2) ? 'nd' :\n                        (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: 'R'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es-es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                    (b === 7 || b === 0) ? 'mo' :\n                        (b === 8) ? 'vo' :\n                            (b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                (b === 7 || b === 0) ? 'mo' :\n\t\t(b === 8) ? 'vo' :\n\t\t(b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'et', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tuh',\n            million: ' mln',\n            billion: ' mld',\n            trillion: ' trl'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fi', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ca', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ch', {\n        delimiters: {\n            thousands: '\\'',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'hu', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'E',  // ezer\n            million: 'M',   // millió\n            billion: 'Mrd', // milliárd\n            trillion: 'T'   // trillió\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: ' Ft'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'it', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mila',\n            million: 'mil',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ja', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十億',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'lv', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tūkst.',\n            million: ' milj.',\n            billion: ' mljrd.',\n            trillion: ' trilj.'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-be', {\n        delimiters: {\n            thousands: ' ',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : ' mln',\n            billion  : ' mld',\n            trillion : ' bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-nl', {\n        delimiters: {\n            thousands: '.',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : 'mln',\n            billion  : 'mrd',\n            trillion : 'bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'no', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'kr'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pl', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tys.',\n            million: 'mln',\n            billion: 'mld',\n            trillion: 'bln'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'PLN'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-br', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mil',\n            million: 'milhões',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: 'R$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-pt', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн.',\n            billion: 'млрд.',\n            trillion: 'трлн.'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: 'руб.'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sk', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sl', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mrd',\n            trillion: 'trilijon'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n    \n\n    numeral.register('locale', 'th', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'พัน',\n            million: 'ล้าน',\n            billion: 'พันล้าน',\n            trillion: 'ล้านล้าน'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '฿'\n        }\n    });\n})();\n\n\n(function() {\n        var suffixes = {\n            1: '\\'inci',\n            5: '\\'inci',\n            8: '\\'inci',\n            70: '\\'inci',\n            80: '\\'inci',\n\n            2: '\\'nci',\n            7: '\\'nci',\n            20: '\\'nci',\n            50: '\\'nci',\n\n            3: '\\'üncü',\n            4: '\\'üncü',\n            100: '\\'üncü',\n\n            6: '\\'ncı',\n\n            9: '\\'uncu',\n            10: '\\'uncu',\n            30: '\\'uncu',\n\n            60: '\\'ıncı',\n            90: '\\'ıncı'\n        };\n\n    numeral.register('locale', 'tr', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'bin',\n            million: 'milyon',\n            billion: 'milyar',\n            trillion: 'trilyon'\n        },\n        ordinal: function (number) {\n            if (number === 0) {  // special case for zero\n                return '\\'ıncı';\n            }\n\n            var a = number % 10,\n                b = number % 100 - a,\n                c = number >= 100 ? 100 : null;\n\n          return suffixes[a] || suffixes[b] || suffixes[c];\n        },\n        currency: {\n            symbol: '\\u20BA'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'uk-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тис.',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'блн'\n        },\n        ordinal: function () {\n            // not ideal, but since in Ukrainian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'vi', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' nghìn',\n            million: ' triệu',\n            billion: ' tỷ',\n            trillion: ' nghìn tỷ'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '₫'\n        }\n    });\n})();\n\n\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}