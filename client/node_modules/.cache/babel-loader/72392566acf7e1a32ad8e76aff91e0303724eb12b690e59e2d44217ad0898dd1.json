{"ast":null,"code":"/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nexport class ImageDrop {\n  /**\n   * Instantiate the module given a quill instance and any options\n   * @param {Quill} quill\n   * @param {Object} options\n   */\n  constructor(quill, options = {}) {\n    // save the quill reference\n    this.quill = quill;\n    // bind handlers to this instance\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handlePaste = this.handlePaste.bind(this);\n    // listen for drop and paste events\n    this.quill.root.addEventListener('drop', this.handleDrop, false);\n    this.quill.root.addEventListener('paste', this.handlePaste, false);\n  }\n\n  /**\n   * Handler for drop event to read dropped files from evt.dataTransfer\n   * @param {Event} evt\n   */\n  handleDrop(evt) {\n    evt.preventDefault();\n    if (evt.dataTransfer && evt.dataTransfer.files && evt.dataTransfer.files.length) {\n      if (document.caretRangeFromPoint) {\n        const selection = document.getSelection();\n        const range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\n        if (selection && range) {\n          selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n        }\n      }\n      this.readFiles(evt.dataTransfer.files, this.insert.bind(this));\n    }\n  }\n\n  /**\n   * Handler for paste event to read pasted files from evt.clipboardData\n   * @param {Event} evt\n   */\n  handlePaste(evt) {\n    if (evt.clipboardData && evt.clipboardData.items && evt.clipboardData.items.length) {\n      this.readFiles(evt.clipboardData.items, dataUrl => {\n        const selection = this.quill.getSelection();\n        if (selection) {\n          // we must be in a browser that supports pasting (like Firefox)\n          // so it has already been placed into the editor\n        } else {\n          // otherwise we wait until after the paste when this.quill.getSelection()\n          // will return a valid index\n          setTimeout(() => this.insert(dataUrl), 0);\n        }\n      });\n    }\n  }\n\n  /**\n   * Insert the image into the document at the current cursor position\n   * @param {String} dataUrl  The base64-encoded image URI\n   */\n  insert(dataUrl) {\n    const index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n    this.quill.insertEmbed(index, 'image', dataUrl, 'user');\n  }\n\n  /**\n   * Extract image URIs a list of files from evt.dataTransfer or evt.clipboardData\n   * @param {File[]} files  One or more File objects\n   * @param {Function} callback  A function to send each data URI to\n   */\n  readFiles(files, callback) {\n    // check each file for an image\n    [].forEach.call(files, file => {\n      if (!file.type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\\.microsoft\\.icon)/i)) {\n        // file is not an image\n        // Note that some file formats such as psd start with image/* but are not readable\n        return;\n      }\n      // set up file reader\n      const reader = new FileReader();\n      reader.onload = evt => {\n        callback(evt.target.result);\n      };\n      // read the clipboard item or file\n      const blob = file.getAsFile ? file.getAsFile() : file;\n      if (blob instanceof Blob) {\n        reader.readAsDataURL(blob);\n      }\n    });\n  }\n}","map":{"version":3,"names":["ImageDrop","constructor","quill","options","handleDrop","bind","handlePaste","root","addEventListener","evt","preventDefault","dataTransfer","files","length","document","caretRangeFromPoint","selection","getSelection","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","readFiles","insert","clipboardData","items","dataUrl","setTimeout","index","getLength","insertEmbed","callback","forEach","call","file","type","match","reader","FileReader","onload","target","result","blob","getAsFile","Blob","readAsDataURL"],"sources":["D:/Workspace/vuejs/Ecommerce/frontend/node_modules/quill-image-drop-module/index.js"],"sourcesContent":["/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nexport class ImageDrop {\n\n\t/**\n\t * Instantiate the module given a quill instance and any options\n\t * @param {Quill} quill\n\t * @param {Object} options\n\t */\n\tconstructor(quill, options = {}) {\n\t\t// save the quill reference\n\t\tthis.quill = quill;\n\t\t// bind handlers to this instance\n\t\tthis.handleDrop = this.handleDrop.bind(this);\n\t\tthis.handlePaste = this.handlePaste.bind(this);\n\t\t// listen for drop and paste events\n\t\tthis.quill.root.addEventListener('drop', this.handleDrop, false);\n\t\tthis.quill.root.addEventListener('paste', this.handlePaste, false);\n\t}\n\n\t/**\n\t * Handler for drop event to read dropped files from evt.dataTransfer\n\t * @param {Event} evt\n\t */\n\thandleDrop(evt) {\n\t\tevt.preventDefault();\n\t\tif (evt.dataTransfer && evt.dataTransfer.files && evt.dataTransfer.files.length) {\n\t\t\tif (document.caretRangeFromPoint) {\n\t\t\t\tconst selection = document.getSelection();\n\t\t\t\tconst range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\n\t\t\t\tif (selection && range) {\n\t\t\t\t\tselection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.readFiles(evt.dataTransfer.files, this.insert.bind(this));\n\t\t}\n\t}\n\n\t/**\n\t * Handler for paste event to read pasted files from evt.clipboardData\n\t * @param {Event} evt\n\t */\n\thandlePaste(evt) {\n\t\tif (evt.clipboardData && evt.clipboardData.items && evt.clipboardData.items.length) {\n\t\t\tthis.readFiles(evt.clipboardData.items, dataUrl => {\n\t\t\t\tconst selection = this.quill.getSelection();\n\t\t\t\tif (selection) {\n\t\t\t\t\t// we must be in a browser that supports pasting (like Firefox)\n\t\t\t\t\t// so it has already been placed into the editor\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise we wait until after the paste when this.quill.getSelection()\n\t\t\t\t\t// will return a valid index\n\t\t\t\t\tsetTimeout(() => this.insert(dataUrl), 0);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Insert the image into the document at the current cursor position\n\t * @param {String} dataUrl  The base64-encoded image URI\n\t */\n\tinsert(dataUrl) {\n\t\tconst index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n\t\tthis.quill.insertEmbed(index, 'image', dataUrl, 'user');\n\t}\n\n\t/**\n\t * Extract image URIs a list of files from evt.dataTransfer or evt.clipboardData\n\t * @param {File[]} files  One or more File objects\n\t * @param {Function} callback  A function to send each data URI to\n\t */\n\treadFiles(files, callback) {\n\t\t// check each file for an image\n\t\t[].forEach.call(files, file => {\n\t\t\tif (!file.type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\\.microsoft\\.icon)/i)) {\n\t\t\t\t// file is not an image\n\t\t\t\t// Note that some file formats such as psd start with image/* but are not readable\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set up file reader\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = (evt) => {\n\t\t\t\tcallback(evt.target.result);\n\t\t\t};\n\t\t\t// read the clipboard item or file\n\t\t\tconst blob = file.getAsFile ? file.getAsFile() : file;\n\t\t\tif (blob instanceof Blob) {\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t}\n\t\t});\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}