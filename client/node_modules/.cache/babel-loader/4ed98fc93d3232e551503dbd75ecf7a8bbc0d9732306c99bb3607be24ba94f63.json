{"ast":null,"code":"import axios from 'axios';\nimport PieChartVue from '../piechart/PieChart.vue';\nimport LineChart from '../splinechart/SplineChart.vue';\nexport default {\n  name: 'ChartView',\n  components: {\n    LineChart,\n    PieChartVue\n  },\n  data() {\n    return {\n      data: []\n    };\n  },\n  methods: {\n    async getTotalByMonth() {\n      try {\n        const res = await axios.get('order/totalByMonth');\n        this.data = res.data;\n      } catch (err) {\n        alert(\"Loi!\");\n      }\n    }\n  },\n  mounted() {\n    if (this.getTotalByMonth()) {\n      this.chartOptions.xaxis.categories = Array.from({\n        length: 12\n      }, (v, i) => `${i + 1}`);\n      const revenueByMonth = new Array(12).fill(0);\n      this.data.map(item => {\n        if (item._id && item.totalRevenue) {\n          revenueByMonth[item._id - 1] = item.totalRevenue / 1000000;\n          this.series.data = revenueByMonth;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","PieChartVue","LineChart","name","components","data","methods","getTotalByMonth","res","get","err","alert","mounted","chartOptions","xaxis","categories","Array","from","length","v","i","revenueByMonth","fill","map","item","_id","totalRevenue","series"],"sources":["src/components/chart/ChartView.vue"],"sourcesContent":["<template>\r\n     <div class=\"grid grid-cols-5 gap-2\">\r\n        <div class=\" col-span-3 shadow-lg\">\r\n            <LineChart :data=\"data\"/>\r\n        </div>\r\n        <div class=\" col-span-2 shadow-lg  \">\r\n           <div class=\"\"> <PieChartVue :data=\"data\"/></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n\r\nimport axios from 'axios'\r\nimport PieChartVue from '../piechart/PieChart.vue'\r\nimport LineChart from '../splinechart/SplineChart.vue'\r\nexport default {\r\n    name:'ChartView',\r\n    components:{LineChart,PieChartVue},\r\n    data(){\r\n        return{\r\n            data:[]\r\n        }\r\n    },\r\n    methods:{\r\n        async getTotalByMonth(){\r\n            try {\r\n                const res=await axios.get('order/totalByMonth')\r\n                this.data=res.data\r\n            } catch (err) {\r\n                alert(\"Loi!\")\r\n            }\r\n        }\r\n    },\r\n    mounted(){\r\n        if(this.getTotalByMonth()){\r\n            this.chartOptions.xaxis.categories = Array.from({ length: 12 }, (v, i) => `${i + 1}`);\r\n            const revenueByMonth= new Array(12).fill(0);\r\n            this.data.map(item => {\r\n            if (item._id && item.totalRevenue) {\r\n              revenueByMonth[item._id - 1] = item.totalRevenue /1000000;\r\n              this.series.data=revenueByMonth\r\n            }\r\n          });\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"AAYA,OAAAA,KAAA;AACA,OAAAC,WAAA;AACA,OAAAC,SAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAF,SAAA;IAAAD;EAAA;EACAI,KAAA;IACA;MACAA,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,gBAAA;MACA;QACA,MAAAC,GAAA,SAAAR,KAAA,CAAAS,GAAA;QACA,KAAAJ,IAAA,GAAAG,GAAA,CAAAH,IAAA;MACA,SAAAK,GAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,SAAAL,eAAA;MACA,KAAAM,YAAA,CAAAC,KAAA,CAAAC,UAAA,GAAAC,KAAA,CAAAC,IAAA;QAAAC,MAAA;MAAA,IAAAC,CAAA,EAAAC,CAAA,QAAAA,CAAA;MACA,MAAAC,cAAA,OAAAL,KAAA,KAAAM,IAAA;MACA,KAAAjB,IAAA,CAAAkB,GAAA,CAAAC,IAAA;QACA,IAAAA,IAAA,CAAAC,GAAA,IAAAD,IAAA,CAAAE,YAAA;UACAL,cAAA,CAAAG,IAAA,CAAAC,GAAA,QAAAD,IAAA,CAAAE,YAAA;UACA,KAAAC,MAAA,CAAAtB,IAAA,GAAAgB,cAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}